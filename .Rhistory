filter(hpsa_status == "Withdrawn") %>%
count() -> data2withdr
data2hpsa %>%
group_by(County) %>%
filter(hpsa_status != "Withdrawn") %>%
count() -> data2desig
hpsa_counties <- tibble(
County = common_counties
)
data2desig %>%
select(County, n) %>%
rename(num_desig = n) %>%
right_join(hpsa_counties, by = "County") -> hpsa_counties
data2withdr %>%
select(County, n) %>%
rename(num_withdr = n) %>%
right_join(hpsa_counties, by = "County") -> hpsa_counties
hpsa_counties[is.na(hpsa_counties$num_withdr), "num_withdr"] <- 0
hpsa_counties[is.na(hpsa_counties$num_desig), "num_desig"] <- 0
data1 %>%
filter(!is.na(HospitalRating)) %>%
group_by(County, HospitalRating) %>%
summarise(count = n()) -> county_ratings
county_ratings[county_ratings$HospitalRating == "Better",] %>%
select(County, count) %>%
rename(num_better = count) %>%
right_join(hpsa_counties, by = "County") -> hpsa_counties
county_ratings[county_ratings$HospitalRating == "As Expected",] %>%
select(County, count) %>%
rename(num_asexp = count) %>%
right_join(hpsa_counties, by = "County") -> hpsa_counties
county_ratings[county_ratings$HospitalRating == "Worse",] %>%
select(County, count) %>%
rename(num_worse = count) %>%
right_join(hpsa_counties, by = "County") -> hpsa_counties
head(hpsa_counties)
data1_heart %>%
left_join(data3_counties, by = "County") %>%
left_join(hpsa_counties, by = "County") -> reg_data_final
dim(reg_data_final)
head(reg_data_final)
# Goal is to have final data into a rectangular tibble with no/few NAs
write_csv(reg_data_final, ".\\Data\\reg_data_final.csv")
library(glmnet)
library(glmnet)
library(tidyverse); theme_set(theme_bw())
reg_data <- read_csv(".\\..\\..\\Data\\reg_data_final.csv")
reg_data
reg_data$TotalDeaths <- sum(c(reg_data$`As Expected`, reg_data$Better, reg_data$Worse))
reg_data
reg_data$TotalDeaths <- reg_data$`As Expected` + reg_data$Better + reg_data$Worse
reg_data
reg_data$DeathsperCap <- reg_data$TotalDeaths/reg_data$TotalPop
model_full <- lm(DeathsperCap ~ ., data = reg_data)
y_true <- reg_data$DeathsperCap
model_full <- lm(DeathsperCap ~ ., data = reg_data)
X_model <- model.matrix(model_full)
X_model <- X_model[,-1]
y_true <- reg_data$DeathsperCap
LASSO_reg <- cv.glmnet(X_model, y_true, alpha = 1, nfolds = 10)
set.seed(123)
LASSO_reg <- cv.glmnet(X_model, y_true, alpha = 1, nfolds = 10)
set.seed(123)
LASSO_reg <- cv.glmnet(X_model, y_true, alpha = 1)
head(reg_data)
names(reg_data)
names(reg_data)[2:4]
reg_data %>%
pivot_longer(names(reg_data)[2:4])
model_full <- lm(DeathsperCap ~ num_worse + num_asexp + num_better + num_withdr + num_desig + name*value, data = reg_data)
model_full <- lm(DeathsperCap ~ num_worse + num_asexp + num_better + num_withdr + num_desig + name*value, data = reg_data)
reg_data %>%
pivot_longer(names(reg_data)[2:4]) -> reg_data_long
model_full <- lm(DeathsperCap ~ num_worse + num_asexp + num_better + num_withdr + num_desig + name*value, data = reg_data_long)
X_model <- model.matrix(model_full)
X_model <- X_model[,-1]
y_true <- reg_data$DeathsperCap
set.seed(123)
LASSO_reg <- cv.glmnet(X_model, y_true, alpha = 1)
set.seed(123)
LASSO_reg <- cv.glmnet(X_model, y_true, alpha = 1)
model_full
model_full <- lm(DeathsperCap ~ num_worse + num_asexp + num_better + num_withdr + num_desig + name*value, data = reg_data_long)
X_model <- model.matrix(model_full)
X_model <- X_model[,-1]
y_true <- reg_data_long$DeathsperCap
set.seed(123)
LASSO_reg <- cv.glmnet(X_model, y_true, alpha = 1)
model_full <- lm(DeathsperCap ~ num_worse + num_asexp + num_better + num_withdr + num_desig + name*value, data = reg_data_long)
X_model <- model.matrix(model_full)
X_model <- X_model[,-1]
y_true <- reg_data_long$DeathsperCap
set.seed(123)
LASSO_reg <- cv.glmnet(X_model, y_true, alpha = 1)
coef(LASSO_reg)
LASSO_reg
X_model
LASSO_reg <- cv.glmnet(X_model, y_true, alpha = 1)
reg_data %>%
pivot_longer(names(reg_data)[2:4]) -> reg_data_long
model_full <- lm(DeathsperCap ~ num_worse + num_asexp + num_better + num_withdr + num_desig + name*value, data = reg_data_long)
X_model <- model.matrix(model_full)
X_model <- X_model[,-1]
y_true <- reg_data_long$DeathsperCap
set.seed(123)
LASSO_reg <- cv.glmnet(X_model, y_true, alpha = 1)
model_full <- lm(DeathsperCap ~ num_worse + num_asexp + num_better + num_withdr + num_desig + name*value, data = reg_data_long)
X_model <- model.matrix(model_full)
X_model <- X_model[,-1]
y_true <- reg_data_long$DeathsperCap
y_true
X_model
y_true
reg_data_long
reg_data %>%
pivot_longer(names(reg_data)[2:4]) %>%
filter(!is.na())-> reg_data_long
reg_data_long
reg_data %>%
pivot_longer(names(reg_data)[2:4]) %>%
filter(!is.na(num_worse)) -> reg_data_long
reg_data_long
reg_data %>%
pivot_longer(names(reg_data)[2:4]) %>%
filter(!is.na(num_worse) & !is.na(num_better)) -> reg_data_long
reg_data %>%
pivot_longer(names(reg_data)[2:4]) %>%
filter(!is.na(num_worse) & !is.na(num_better)) -> reg_data_long
reg_data_long
model_full <- lm(DeathsperCap ~ num_worse + num_asexp + num_better + num_withdr + num_desig + name*value, data = reg_data_long)
X_model <- model.matrix(model_full)
X_model <- X_model[,-1]
y_true <- reg_data_long$DeathsperCap
reg_data %>%
pivot_longer(names(reg_data)[2:4]) %>%
filter(!is.na(num_worse) & !is.na(num_better)) -> reg_data_long
reg_data_long
model_full <- lm(DeathsperCap ~ TotalPop + num_worse + num_asexp + num_better + num_withdr + num_desig + name*value, data = reg_data_long)
X_model <- model.matrix(model_full)
X_model <- X_model[,-1]
y_true <- reg_data_long$DeathsperCap
set.seed(123)
LASSO_reg <- cv.glmnet(X_model, y_true, alpha = 1)
coef(LASSO_reg)
LASSO_reg
y_pred_1s <- predict(LASSO_reg, newx = X_model, type = "response", s = "lambda.1se")
y_pred_min <- predict(LASSO_reg, newx = X_model, type = "response", s = "lambda.min")
c("PredMSE 1se" = mean((y_pred_1s - y_true)^2), "PredMSE min" = mean((y_pred_min - y_true)^2))
LASSO_reg <- cv.glmnet(X_model, y_true, alpha = 1)
coef(LASSO_reg)
LASSO_reg
path4 <- "Data\\CAdatapile.xlsx"
data4 <- read_csv(path4)
library(tidyverse); theme_set(theme_bw())
path1 <- "Data\\2016-2021-imi-results-long-view.csv"
path2 <- "Data\\data2.csv"
path3 <- "Data\\2020census.csv"
path4 <- "Data\\CA_datapile.xlsx"
data1 <- read_csv(path1)
data2 <- read_csv(path2)
data3 <- read_csv(path3)
data4 <- read_csv(path4)
data4 <- read_csv(path4)
data4 <- read_excel(path4, sheet = 2)
data4 <- read_xlsx(path4, sheet = 2)
library(tidyverse); theme_set(theme_bw())
path4 <- "Data\\CA_datapile.xlsx"
data4 <- read_xlsx(path4, sheet = 2)
data4 <- read_excel(path4, sheet = 2)
path4 <- "Data\\CA_datapile.xlsx"
data4 <- read_excel(path4)
read_excel
library(readxl)
data4 <- read_excel(path4)
data4
data4 <- read_excel(path4, sheet = 2)
data4
data4
head(data4)
data4
data4 %>%
filter(County %in% common_counties) -> data4
data4 %>%
filter(County %in% common_counties) -> data4
data4 %>%
filter(County %in% common_counties) -> data4
data4
data_dims <- tibble(
"Dimension" = c("Rows", "Columns"),
"Data1" = dim(data1),
"Data2" = dim(data2),
"Data3" = dim(data3_counties),
"Data4" = dim(data4)
)
data1_heart %>%
left_join(data3_counties, by = "County") %>%
left_join(hpsa_counties, by = "County") %>%
left_join(data4, by = "County") -> reg_data_final
data1_heart %>%
left_join(data3_counties, by = "County") %>%
left_join(hpsa_counties, by = "County") %>%
left_join(data4, by = "County") -> reg_data_final
dim(reg_data_final)
head(reg_data_final)
names(data4)
names(data4)
data4 %>%
rename(amer_indian = "Race/Ethnicity: American Indian (2023)") %>%
filter(County %in% common_counties) -> data4
data4
names(data4)
data4 %>%
rename(amer_indian = "Race/Ethnicity: American Indian (2023)",
black = "Race/Ethnicity: Black (2023)",
asian = "Race/Ethnicity: Asian (2023)",
multi_race = "Race/Ethnicity: Multi-Racial/Ethnic (2023)",
pac_island = "Race/Ethnicity: Hawaiian/ Pacific Island (2023)",
white = "Race/Ethnicity: White (2023)",
poverty = "Poverty: All Ages (2021)") %>%
filter(County %in% common_counties) -> data4
names(data4)
data4 <- read_excel(path4, sheet = 2)
names(data4)
data4 %>%
rename(amer_indian = "Race/Ethnicity: American Indian (2023)",
black = "Race/Ethnicity: Black (2023)",
asian = "Race/Ethnicity: Asian (2023)",
multi_race = "Race/Ethnicity: Multi-Racial/Ethnic (2023)",
pac_island = "Race/Ethnicity: Hawaiian/ Pacific Island (2023)",
white = "Race/Ethnicity: White (2023)",
poverty = "Poverty: All Ages (2021)") %>%
filter(County %in% common_counties) -> data4
names(data4)
path4 <- "Data\\CA_datapile.xlsx"
data4 <- read_excel(path4, sheet = 2)
data_dims <- tibble(
"Dimension" = c("Rows", "Columns"),
"Data1" = dim(data1),
"Data2" = dim(data2),
"Data3" = dim(data3_counties),
"Data4" = dim(data4)
)
names(data4)
data4 %>%
rename(amer_indian = "Race/Ethnicity: American Indian (2023)",
black = "Race/Ethnicity: Black (2023)",
asian = "Race/Ethnicity: Asian (2023)",
hispanic = "Race/Ethnicity: Hispanic (2023)",
multi_race = "Race/Ethnicity: Multi-Racial/Ethnic (2023)",
pac_island = "Race/Ethnicity: Hawaiian/ Pacific Island (2023)",
white = "Race/Ethnicity: White (2023)",
poverty = "Poverty: All Ages (2021)",
labor_force = "Labor Force (9-2023)",
unemployed = "Labor Force: Unemployed (9-2023)",
median_income = "Median Household Income (2021)") %>%
filter(County %in% common_counties) -> data4
names(data4)
data4 %>%
rename(amer_indian = "Race/Ethnicity: American Indian (2023)",
black = "Race/Ethnicity: Black (2023)",
asian = "Race/Ethnicity: Asian (2023)",
hispanic = "Race/Ethnicity: Hispanic (2023)",
multi_race = "Race/Ethnicity: Multi-Racial/Ethnic (2023)",
pac_island = "Race/Ethnicity: Hawaiian/ Pacific Island (2023)",
white = "Race/Ethnicity: White (2023)",
poverty = "Poverty: All Ages (2021)",
labor_force = "Labor Force (9-2023)",
unemployed = "Labor Force: Unemployed (9-2023)",
median_income = "Median Household Income (2021)") %>%
filter(County %in% common_counties) %>%
select(County, amer_indian, black, hispanic, asian, multi_race, pac_island, white, poverty, labor_force, unemployed, median_income) -> data4
data4 <- read_excel(path4, sheet = 2)
data4 %>%
rename(amer_indian = "Race/Ethnicity: American Indian (2023)",
black = "Race/Ethnicity: Black (2023)",
asian = "Race/Ethnicity: Asian (2023)",
hispanic = "Race/Ethnicity: Hispanic (2023)",
multi_race = "Race/Ethnicity: Multi-Racial/Ethnic (2023)",
pac_island = "Race/Ethnicity: Hawaiian/ Pacific Island (2023)",
white = "Race/Ethnicity: White (2023)",
poverty = "Poverty: All Ages (2021)",
labor_force = "Labor Force (9-2023)",
unemployed = "Labor Force: Unemployed (9-2023)",
median_income = "Median Household Income (2021)") %>%
filter(County %in% common_counties) %>%
select(County, amer_indian, black, hispanic, asian, multi_race, pac_island, white, poverty, labor_force, unemployed, median_income) -> data4
data4
library(tidyverse); theme_set(theme_bw())
library(readxl)
path1 <- "Data\\2016-2021-imi-results-long-view.csv"
path2 <- "Data\\data2.csv"
path3 <- "Data\\2020census.csv"
path4 <- "Data\\CA_datapile.xlsx"
data1 <- read_csv(path1)
data2 <- read_csv(path2)
data3 <- read_csv(path3)
data4 <- read_excel(path4, sheet = 2)
head(data1)
head(data2)
head(data3)
head(data4)
# names(data1)
# names(data2)
# names(data3)
names(data1) <- c("Year", "County", "Hospital", "OSHPDID", "Procedure", "AdjMortRate", "Deaths", "Cases", "HospitalRating", "Longitude", "Latitude")
kept_cols <- c("Year", "County", "Hospital", "OSHPDID", "Procedure", "AdjMortRate", "Deaths", "Cases", "HospitalRating")
data1 <- data1[, kept_cols]
glimpse(data1)
data1_counties <- unique(data1$County)
data2_counties <- sort(unique(data2$counties))
# all(data1_counties[data1_counties %in% data2_counties] == data2_counties[data2_counties %in% data1_counties])
common_counties <- data1_counties[data1_counties %in% data2_counties]
common_counties[1:5]
data1 %>%
filter(County %in% common_counties) -> data1
data1$AdjMortRate <- ifelse(data1$AdjMortRate == ".", NA, data1$AdjMortRate)
data1$AdjMortRate <- as.numeric(data1$AdjMortRate)
data1$Deaths <- ifelse(data1$Deaths == ".", NA, data1$Deaths)
data1$Deaths <- as.numeric(data1$Deaths)
unique(data1$Procedure)
data1 %>%
group_by(County, HospitalRating) %>%
filter(Procedure == "Heart Failure" & !is.na(HospitalRating)) %>%
summarize(Total_Deaths = sum(Deaths)) %>%
pivot_wider(names_from = HospitalRating, values_from = Total_Deaths, values_fill = 0) -> data1_heart
data2 %>%
filter(counties %in% common_counties) -> data2
names(data3) <- c("Geography", "TotalPop", "MalePop", "FemalePop", "MedianAge", "MaleMedianAge", "FemaleMedianAge", "AvgHouseholdMems", "AvgFamilyMems", "Under5yoPop", "Under18yoPop", "Pop21andOlder", "Pop55andOlder", "Pop60andOlder", "Pop65andOlder", "PercFemale", "PercUnder18yo", "18", "Geoid", "21")
kept_cols <- c("Geography", "TotalPop", "MalePop", "FemalePop", "MedianAge", "MaleMedianAge", "FemaleMedianAge", "Under5yoPop", "Under18yoPop", "Pop21andOlder", "Pop55andOlder", "Pop60andOlder", "Pop65andOlder", "PercFemale", "PercUnder18yo")
data3 <- data3[, kept_cols]
glimpse(data3)
unique(data3$MedianAge)
data3$MedianAge[data3$MedianAge == '-'] <- NA
data3$MedianAge <- as.numeric(data3$MedianAge)
# data3$MedianAge
data3$MaleMedianAge[data3$MaleMedianAge == '-'] <- NA
data3$MaleMedianAge <- as.numeric(data3$MaleMedianAge)
data3$FemaleMedianAge[data3$FemaleMedianAge == '-'] <- NA
data3$FemaleMedianAge <- as.numeric(data3$FemaleMedianAge)
unique(data3$PercUnder18yo)[1:10]
string <- "24.5%"
# string <- NA
expression <- "(\\d{2}\\.\\d)"
as.numeric(str_extract(string, expression))
expression <- "(\\d{1,3}\\.\\d)"
temp <- double(length(data3$PercUnder18yo))
for (i in seq_along(data3$PercUnder18yo)){
temp[i] <- as.double(str_extract(data3$PercUnder18yo[i], expression))
}
data3$PercUnder18yo <- temp
temp <- double(length(data3$PercFemale))
for (i in seq_along(data3$PercFemale)){
temp[i] <- as.double(str_extract(data3$PercFemale[i], expression))
}
data3$PercFemale <- temp
expression <- "(.*) County"
data3_counties <- data3[str_detect(data3$Geography, expression),]
names(data3_counties)[1] <- "County"
expression <- "(.*) County"
data3_counties$County <- str_match(data3_counties$County, expression)[,2]
head(data3_counties)
# names(data4)
data4 %>%
rename(amer_indian = "Race/Ethnicity: American Indian (2023)",
black = "Race/Ethnicity: Black (2023)",
asian = "Race/Ethnicity: Asian (2023)",
hispanic = "Race/Ethnicity: Hispanic (2023)",
multi_race = "Race/Ethnicity: Multi-Racial/Ethnic (2023)",
pac_island = "Race/Ethnicity: Hawaiian/ Pacific Island (2023)",
white = "Race/Ethnicity: White (2023)",
poverty = "Poverty: All Ages (2021)",
labor_force = "Labor Force (9-2023)",
unemployed = "Labor Force: Unemployed (9-2023)",
median_income = "Median Household Income (2021)") %>%
filter(County %in% common_counties) %>%
select(County, amer_indian, black, hispanic, asian, multi_race, pac_island, white, poverty, labor_force, unemployed, median_income) -> data4
#| tbl-cap: "Dimensions of data sets after cleaning"
data_dims <- tibble(
"Dimension" = c("Rows", "Columns"),
"Data1" = dim(data1),
"Data2" = dim(data2),
"Data3" = dim(data3_counties),
"Data4" = dim(data4)
)
data_dims %>% knitr::kable()
# Goal is to have final data into a rectangular tibble with no/few NAs
class_data_final = tibble()
data1_heart <- read_csv(".\\Data\\data1_heart.csv")
data2 <- read_csv(".\\Data\\data2_clean.csv")
data3_counties <- read_csv(".\\Data\\data3_counties.csv")
names(data2)[names(data2) == 'counties'] <- "County"
data2 %>%
group_by(County, hpsa_status) %>%
select(rural_status, per_pov, med_hh) -> data2hpsa
# Want two new variables for every county: number of withdrawn HPSA hospitals, and num of active HSPA hospitals
data2hpsa %>%
group_by(County) %>%
filter(hpsa_status == "Withdrawn") %>%
count() -> data2withdr
data2hpsa %>%
group_by(County) %>%
filter(hpsa_status != "Withdrawn") %>%
count() -> data2desig
hpsa_counties <- tibble(
County = common_counties
)
data2desig %>%
select(County, n) %>%
rename(num_desig = n) %>%
right_join(hpsa_counties, by = "County") -> hpsa_counties
data2withdr %>%
select(County, n) %>%
rename(num_withdr = n) %>%
right_join(hpsa_counties, by = "County") -> hpsa_counties
hpsa_counties[is.na(hpsa_counties$num_withdr), "num_withdr"] <- 0
hpsa_counties[is.na(hpsa_counties$num_desig), "num_desig"] <- 0
data1 %>%
filter(!is.na(HospitalRating)) %>%
group_by(County, HospitalRating) %>%
summarise(count = n()) -> county_ratings
county_ratings[county_ratings$HospitalRating == "Better",] %>%
select(County, count) %>%
rename(num_better = count) %>%
right_join(hpsa_counties, by = "County") -> hpsa_counties
county_ratings[county_ratings$HospitalRating == "As Expected",] %>%
select(County, count) %>%
rename(num_asexp = count) %>%
right_join(hpsa_counties, by = "County") -> hpsa_counties
county_ratings[county_ratings$HospitalRating == "Worse",] %>%
select(County, count) %>%
rename(num_worse = count) %>%
right_join(hpsa_counties, by = "County") -> hpsa_counties
head(hpsa_counties)
data1_heart %>%
left_join(data3_counties, by = "County") %>%
left_join(hpsa_counties, by = "County") %>%
left_join(data4, by = "County") -> reg_data_final
dim(reg_data_final)
head(reg_data_final)
# Goal is to have final data into a rectangular tibble with no/few NAs
write_csv(reg_data_final, ".\\Data\\reg_data_final.csv")
write_csv(data4, ".\\Data\\data4.csv")
reg_data <- read_csv(".\\..\\..\\Data\\reg_data_final.csv")
reg_data
reg_data$TotalDeaths <- reg_data$`As Expected` + reg_data$Better + reg_data$Worse
reg_data$DeathsperCap <- reg_data$TotalDeaths/reg_data$TotalPop
reg_data %>%
pivot_longer(names(reg_data)[2:4]) %>%
filter(!is.na(num_worse) & !is.na(num_better)) -> reg_data_long
reg_data_long
reg_data$unempl_prop <- reg_data$unemployed/reg_data$labor_force
model_full <- lm(DeathsperCap ~ TotalPop + poverty + median_income + unempl_prop + num_worse + num_asexp + num_better + num_withdr + num_desig + name*value, data = reg_data_long)
reg_data$unempl_prop <- reg_data$unemployed/reg_data$labor_force
library(glmnet)
library(tidyverse); theme_set(theme_bw())
reg_data <- read_csv(".\\..\\..\\Data\\reg_data_final.csv")
reg_data$TotalDeaths <- reg_data$`As Expected` + reg_data$Better + reg_data$Worse
reg_data$DeathsperCap <- reg_data$TotalDeaths/reg_data$TotalPop
reg_data$unempl_prop <- reg_data$unemployed/reg_data$labor_force
head(reg_data)
reg_data %>%
pivot_longer(names(reg_data)[2:4]) %>%
filter(!is.na(num_worse) & !is.na(num_better)) -> reg_data_long
reg_data_long
model_full <- lm(DeathsperCap ~ TotalPop + poverty + median_income + unempl_prop + num_worse + num_asexp + num_better + num_withdr + num_desig + name*value, data = reg_data_long)
X_model <- model.matrix(model_full)
X_model <- X_model[,-1]
y_true <- reg_data_long$DeathsperCap
set.seed(123)
LASSO_reg <- cv.glmnet(X_model, y_true, alpha = 1)
coef(LASSO_reg)
LASSO_reg
y_pred_1s <- predict(LASSO_reg, newx = X_model, type = "response", s = "lambda.1se")
y_pred_min <- predict(LASSO_reg, newx = X_model, type = "response", s = "lambda.min")
c("PredMSE 1se" = mean((y_pred_1s - y_true)^2), "PredMSE min" = mean((y_pred_min - y_true)^2))
plot(sim_LASSO)
plot(LASSO_reg)
model_full <- lm(TotalDeathas ~ TotalPop + poverty + median_income + unempl_prop + num_worse + num_asexp + num_better + num_withdr + num_desig + name*value, data = reg_data_long)
model_full <- lm(TotalDeaths ~ TotalPop + poverty + median_income + unempl_prop + num_worse + num_asexp + num_better + num_withdr + num_desig + name*value, data = reg_data_long)
X_model <- model.matrix(model_full)
X_model <- X_model[,-1]
y_true <- reg_data_long$DeathsperCap
set.seed(123)
LASSO_reg <- cv.glmnet(X_model, y_true, alpha = 1)
coef(LASSO_reg)
LASSO_reg
plot(LASSO_reg)
head(reg_data)
reg_data %>%
pivot_longer(names(reg_data)[2:4]) %>%
filter(!is.na(num_worse) & !is.na(num_better)) -> reg_data_long
reg_data_long
reg_data_long
reg_data %>%
pivot_longer(names(reg_data)[2:4]) %>%
filter(!is.na(num_worse) & !is.na(num_better)) %>%
rename(Deaths = value, rating = name) -> reg_data_long
reg_data_long
reg_data_long$DeathsperCap <- reg_data_long$Deaths/reg_data_long$TotalPop
reg_data_long
library(glmnet)
library(tidyverse); theme_set(theme_bw())
reg_data <- read_csv(".\\..\\..\\Data\\reg_data_final.csv")
reg_data$TotalDeaths <- reg_data$`As Expected` + reg_data$Better + reg_data$Worse
reg_data$unempl_prop <- reg_data$unemployed/reg_data$labor_force
head(reg_data)
reg_data %>%
pivot_longer(names(reg_data)[2:4]) %>%
filter(!is.na(num_worse) & !is.na(num_better)) %>%
rename(Deaths = value, rating = name) -> reg_data_long
reg_data_long
reg_data_long$DeathsperCap <- reg_data_long$Deaths/reg_data_long$TotalPop
