```{r}
#| echo: true

library(tidyverse)
```

## Loading the dataset

```{r}
#| message: false
hpsa <- read_csv("./Data/hpsa.csv") 
glimpse(hpsa)
```

### Creating training and testing sets

Here we will be using 60% of our dataset for training and 40% for testing

```{r}
set.seed(123)

training_pct <- .50 
Z <- sample(nrow(hpsa), training_pct*nrow(hpsa))

hpsa_train <- hpsa[Z, ]
hpsa_test <- hpsa[-Z, ]

nrow(hpsa_test)
nrow(hpsa_train)
```

### Variable selection

```{r}
set.seed(123)
log_full <- glm(as.factor(hpsa_status) ~., data = hpsa_train, 
                family = "binomial")
log_null <- glm(as.factor(hpsa_status) ~ 1, data = hpsa_train,
                family = "binomial")

summary(log_full)
```

```{r}
step_outf <- step(log_null, 
                 scope = list(lower = log_null, upper = log_full),
                 method = "forward", trace = 0)

step_outb <- step(log_full, 
                 scope = list(lower = log_null, upper = log_full),
                 method = "backward", trace = 0)
```

```{r}
summary(step_outf)
```

### Prediction Accuracy

```{r}

#Step forward model

# Predictions
predsrd <- predict(step_outf, newdata = hpsa_test, type = "response")

# Convert to classification prediction
Yhatrd <-  ifelse(predsrd >= 0.5, "Designated", "Withdrawn")

# confusion matrix
confmatrd <- table(Yhatrd, hpsa_test$hpsa_status)
confmatrd

# Correct classification prediction rate
accuracyrd <- sum(confmatrd[1], confmatrd[4])/sum(confmatrd)
accuracyrd
```

```{r}

# Step backward model

# Predictions
predsrdb <- predict(step_outb, newdata = hpsa_test, type = "response")

# Convert to classification prediction
Yhatrdb <-  ifelse(predsrdb >= 0.5, "Designated", "Withdrawn")

# confusion matrix
confmatrdb <- table(Yhatrdb, hpsa_test$hpsa_status)
confmatrdb

# Correct classification prediction rate
accuracyrdb <- sum(confmatrdb[1], confmatrdb[4])/sum(confmatrdb)
accuracyrdb
```

### Using K-fold cross validation to find prediction mean squared error

```{r}
set.seed(123)

# Loss function
Lossfn <- function(Y, p) {
  mean(1 * (Y == 1 & p <= .50) | (1 * (Y == 0 & p > .50)),
       na.rm = TRUE)
}

# Convert response to numeric 0's and 1's
hpsa$Y <- as.numeric(as.factor(hpsa$hpsa_status)) - 1
```

```{r}
#| warning: false
library(boot)
set.seed(123)

# K = 10

# KFold Step Forward model
Kfold_stepoutf <- cv.glm(hpsa, step_outf, cost = Lossfn, K=10)$delta
Kfold_stepoutf


Kfold_stepoutb <- cv.glm(hpsa, step_outb, cost = Lossfn, K=10)$delta
Kfold_stepoutb
```
